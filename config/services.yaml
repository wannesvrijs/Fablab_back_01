# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    cache_adapter: cache.adapter.filesystem
    uploads_machine_images_path: '/uploads/files/machine/images'
    uploads_machine_file_path: '/uploads/files/machine/files'
    uploads_fab_img_path: '/uploads/files/fabmoments/images'
    uploads_eve_img_path: '/uploads/files/events/images'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Serializer\AdminGroupsContextBuilder:
        decorates: 'api_platform.serializer.context_builder'
        arguments: [ '@App\Serializer\AdminGroupsContextBuilder.inner' ]


    App\ApiPlatform\AutoGroupResourceMetadataFactory:
        decorates: 'api_platform.metadata.resource.metadata_factory'
        arguments: ['@App\ApiPlatform\AutoGroupResourceMetadataFactory.inner']

        # causes this to decorate around the cached factory so that
        # our service is never cached (which, of course, can have performance
        # implications!
        decoration_priority: -20

    App\Doctrine\FabmomentSetUserListener:
        tags: ['doctrine.orm.entity_listener']

    App\Doctrine\CheeslistingSetOwnerListener:
        tags: ['doctrine.orm.entity_listener']

    App\Doctrine\InschrijvingSetUserListener:
        tags: ['doctrine.orm.entity_listener']

    App\Doctrine\AfterRegistrationEmailListener:
        tags: ['doctrine.orm.entity_listener']


    acme_api.event.authentication_success_listener:
        class: App\EventListener\AuthenticationSuccessListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    acme_api.event.jwt_created_listener:
        class: App\EventListener\JWTCreatedListener
        arguments: [ '@request_stack' ]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }